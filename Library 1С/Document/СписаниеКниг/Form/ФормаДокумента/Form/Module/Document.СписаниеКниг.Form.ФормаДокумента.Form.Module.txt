
&НаКлиенте
Процедура КнигиКодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Книга = НайтиКнигу(ВыбранноеЗначение);
	Элементы.Книги.ТекущиеДанные.Название = Книга[0];
	Элементы.Книги.ТекущиеДанные.Автор = Книга[1];
КонецПроцедуры

&НаСервере
Функция НайтиКнигу(Код)
	Книга = Справочники.Книги.НайтиПоКоду(Код);
	Массив = Новый Массив(2);
	Массив[0] = Книга.Наименование;
	Массив[1] = Книга.Автор;
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура КнигиКодПриИзменении(Элемент)
	ОчисткаПоляРегистрационныйНомер(Элементы.Книги.ТекущиеДанные.РегистрационныйНомер);
	Элементы.Книги.ТекущийЭлемент = Элементы.КнигиРегистрационныйНомер;
	СписокИспользуемыхРегистрационныхНомеров = ПроверкаСовпадающихПолейСекторИКод(Элементы.Книги.ТекущиеДанные.Сектор, Элементы.Книги.ТекущиеДанные.Код, Элементы.Книги.ТекущиеДанные.НомерСтроки); 
	СписокВыбора = НайтиРегистрационныеНомера(Элементы.Книги.ТекущиеДанные.Сектор, Элементы.Книги.ТекущиеДанные.Код, СписокИспользуемыхРегистрационныхНомеров);
	ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора);
	Если ВыбранноеЗначение <> Неопределено Тогда
		Элементы.Книги.ТекущиеДанные.РегистрационныйНомер = ВыбранноеЗначение.Значение;
	Иначе
		ОчисткаПоляКод(Элементы.Книги.ТекущиеДанные.Код);
		ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Название);
		ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Автор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПроверкаСовпадающихПолейСекторИКод(Сектор, Код, НомерТекущейСтроки)
	СписокИспользуемыхРегистрационныхНомеров = Новый Массив;
	Для Каждого ТекущаяСтрока Из Объект.Книги Цикл
		Если (ТекущаяСтрока.НомерСтроки <> НомерТекущейСтроки) Тогда
			Если ((ТекущаяСтрока.Сектор = Сектор) И (ТекущаяСтрока.Код = Код)) Тогда
				СписокИспользуемыхРегистрационныхНомеров.Добавить(ТекущаяСтрока.РегистрационныйНомер);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  
	Возврат СписокИспользуемыхРегистрационныхНомеров;
КонецФункции

&НаКлиенте
Процедура КнигиВидПриИзменении(Элемент)
	ОчисткаПоляРегистрационныйНомер(Элементы.Книги.ТекущиеДанные.РегистрационныйНомер);
	ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Название);
	ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Автор);
КонецПроцедуры

&НаКлиенте
Процедура КнигиСекторПриИзменении(Элемент)
	ОчисткаПоляРегистрационныйНомер(Элементы.Книги.ТекущиеДанные.РегистрационныйНомер);
	ОчисткаПоляКод(Элементы.Книги.ТекущиеДанные.Код);
	ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Название);
	ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Автор);
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаПоля(Поле)
	Если Поле <> "" Тогда
		Поле = "";
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаПоляРегистрационныйНомер(РегистрационныйНомер)
	ПустойРегистрационныйНомер = "00000000-0000-0000-0000-000000000000"; 
	Если Строка(РегистрационныйНомер) <> ПустойРегистрационныйНомер Тогда
		РегистрационныйНомер = Новый УникальныйИдентификатор(ПустойРегистрационныйНомер);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция НайтиРегистрационныеНомера(Сектор, Код, СписокИспользуемыхРегистрационныхНомеров)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДвижениеЭкземпляровКниг.РегистрационныйНомер,
	|   ДвижениеЭкземпляровКниг.Статус
	|ИЗ
	|	РегистрСведений.ДвижениеЭкземпляровКниг КАК ДвижениеЭкземпляровКниг
	|ГДЕ
	|	ДвижениеЭкземпляровКниг.Сектор = &Сектор
	|	И ДвижениеЭкземпляровКниг.Код = &Код
	|УПОРЯДОЧИТЬ ПО
	|   ДвижениеЭкземпляровКниг.РегистрационныйНомер ВОЗР,
	|   ДвижениеЭкземпляровКниг.Период УБЫВ"
	);
	Запрос.УстановитьПараметр("Сектор", Сектор);
	Запрос.УстановитьПараметр("Код", Код);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокВыбора = Новый СписокЗначений;
	ЭтоПервыйЭлемент = Истина;
	Пока Выборка.Следующий() Цикл
		Если (ЭтоПервыйЭлемент = Истина) Тогда
			ТекущийРегистрационныйНомер = Выборка.РегистрационныйНомер;
			ТекущийСтатус = Выборка.Статус;
			Если ТекущийСтатус = Перечисления.СтатусКниги.ВНаличии Тогда;
				Если (СписокИспользуемыхРегистрационныхНомеров.Найти(ТекущийРегистрационныйНомер) = Неопределено) Тогда
					СписокВыбора.Добавить(Выборка.РегистрационныйНомер);
				КонецЕсли;
			КонецЕсли;
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			Если (Выборка.РегистрационныйНомер <> ТекущийРегистрационныйНомер) Тогда
				ТекущийРегистрационныйНомер = Выборка.РегистрационныйНомер;
				ТекущийСтатус = Выборка.Статус;
				Если ТекущийСтатус = Перечисления.СтатусКниги.ВНаличии Тогда;
					Если (СписокИспользуемыхРегистрационныхНомеров.Найти(ТекущийРегистрационныйНомер) = Неопределено) Тогда
						СписокВыбора.Добавить(Выборка.РегистрационныйНомер);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат СписокВыбора;
КонецФункции

&НаКлиенте
Процедура ОчисткаПоляКод(Код)
	ПустойКод = ВернутьПустуюСсылкуТипаСправочникКниги();
	Если Код <> ПустойКод Тогда
		Код = ПустойКод; 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВернутьПустуюСсылкуТипаСправочникКниги()
	Возврат Справочники.Книги.ПустаяСсылка();
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если (Объект.Книги.Количество() = 0) Тогда
		Отказ = Истина;
		Сообщить("Количество строк должно быть ненулевым");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если (Объект.Дата = '00010101') Тогда 
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТекущийЭлемент = Элементы.Книги;
КонецПроцедуры
