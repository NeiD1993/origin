
&НаКлиенте
Процедура КнигиКодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Книга = НайтиКнигу(ВыбранноеЗначение);
	Элементы.Книги.ТекущиеДанные.Название = Книга[0];
	Элементы.Книги.ТекущиеДанные.Автор = Книга[1];
КонецПроцедуры

&НаСервере
Функция НайтиКнигу(Код)
	Книга = Справочники.Книги.НайтиПоКоду(Код);
	Массив = Новый Массив(2);
	Массив[0] = Книга.Наименование;
	Массив[1] = Книга.Автор;
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура КнигиКодПриИзменении(Элемент)
	ОчисткаПоляРегистрационныйНомер(Элементы.Книги.ТекущиеДанные.РегистрационныйНомер);
	ОчисткаПоляСтоимостьБрони(Элементы.Книги.ТекущиеДанные.СтоимостьБрони);
	Элементы.Книги.ТекущийЭлемент = Элементы.КнигиРегистрационныйНомер;
	СписокИспользуемыхРегистрационныхНомеров = ПроверкаСовпадающихПолейСекторИКод(Элементы.Книги.ТекущиеДанные.Сектор, Элементы.Книги.ТекущиеДанные.Код, Элементы.Книги.ТекущиеДанные.НомерСтроки); 
	СписокВыбора = НайтиРегистрационныеНомера(Элементы.Книги.ТекущиеДанные.Сектор, Элементы.Книги.ТекущиеДанные.Код, СписокИспользуемыхРегистрационныхНомеров);
	ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора);
	Если ВыбранноеЗначение <> Неопределено Тогда
		Элементы.Книги.ТекущиеДанные.РегистрационныйНомер = ВыбранноеЗначение.Значение;
		Элементы.Книги.ТекущиеДанные.СтоимостьБрони = ВернутьСтоимостьБрони(Элементы.Книги.ТекущиеДанные.Вид, Элементы.Книги.ТекущиеДанные.Сектор, Элементы.Книги.ТекущиеДанные.Код, СписокВыбора.Количество());
	Иначе
		ОчисткаПоляКод(Элементы.Книги.ТекущиеДанные.Код);
		ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Название);
		ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Автор);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВернутьСтоимостьБрони(Вид, Сектор, Код, КоличествоВНаличии)
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|   ДвижениеЭкземпляровКнигПоЧитателям.ВидКниги,
	|   ДвижениеЭкземпляровКнигПоЧитателям.Сектор,
	|   ДвижениеЭкземпляровКнигПоЧитателям.Код,
	|   СУММА(1) КАК КоличествоВыданных
    |ИЗ
	|   РегистрСведений.ДвижениеЭкземпляровКнигПоЧитателям КАК ДвижениеЭкземпляровКнигПоЧитателям
    |ГДЕ
	|   ДвижениеЭкземпляровКнигПоЧитателям.Статус = &Статус
	|СГРУППИРОВАТЬ ПО
	|   ДвижениеЭкземпляровКнигПоЧитателям.Название,
	|   ДвижениеЭкземпляровКнигПоЧитателям.Автор,
	|   ДвижениеЭкземпляровКнигПоЧитателям.ВидКниги,
	|   ДвижениеЭкземпляровКнигПоЧитателям.Сектор,
	|   ДвижениеЭкземпляровКнигПоЧитателям.Код"
	);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусКнигиПоЧитателю.Выдано);
	Выборка = Запрос.Выполнить().Выбрать();
	ОбщееКоличествоВыданных = 0;
	Пока Выборка.Следующий() Цикл
		КоличествоВыданных = Выборка.КоличествоВыданных;
		Если ((Выборка.ВидКниги = Вид) И (Выборка.Сектор = Сектор) И (Выборка.Код = Код)) Тогда
			Популярность = КоличествоВыданных; 
		КонецЕсли;
		 ОбщееКоличествоВыданных = ОбщееКоличествоВыданных + КоличествоВыданных;
	 КонецЦикла;
	 Популярность = (Популярность / (ОбщееКоличествоВыданных * КоличествоВНаличии)) * ПараметрыСеанса.СтоимостьЕдиницыБрони;
	 Возврат Популярность;
КонецФункции

&НаКлиенте
Функция ПроверкаСовпадающихПолейСекторИКод(Сектор, Код, НомерТекущейСтроки)
	СписокИспользуемыхРегистрационныхНомеров = Новый Массив;
	Для Каждого ТекущаяСтрока Из Объект.Книги Цикл
		Если (ТекущаяСтрока.НомерСтроки <> НомерТекущейСтроки) Тогда
			Если ((ТекущаяСтрока.Сектор = Сектор) И (ТекущаяСтрока.Код = Код)) Тогда
				СписокИспользуемыхРегистрационныхНомеров.Добавить(ТекущаяСтрока.РегистрационныйНомер);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  
	Возврат СписокИспользуемыхРегистрационныхНомеров;
КонецФункции

&НаКлиенте
Процедура КнигиВидПриИзменении(Элемент)
	ОчисткаПоляРегистрационныйНомер(Элементы.Книги.ТекущиеДанные.РегистрационныйНомер);
	ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Название);
	ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Автор);
	ОчисткаПоляСтоимостьБрони(Элементы.Книги.ТекущиеДанные.СтоимостьБрони);
КонецПроцедуры

&НаКлиенте
Процедура КнигиСекторПриИзменении(Элемент)
	ОчисткаПоляРегистрационныйНомер(Элементы.Книги.ТекущиеДанные.РегистрационныйНомер);
	ОчисткаПоляКод(Элементы.Книги.ТекущиеДанные.Код);
	ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Название);
	ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Автор);
	ОчисткаПоляСтоимостьБрони(Элементы.Книги.ТекущиеДанные.СтоимостьБрони);
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаПоля(Поле)
	Если Поле <> "" Тогда
		Поле = "";
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаПоляСтоимостьБрони(Поле)
	Если Поле <> 0 Тогда
		Поле = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаПоляРегистрационныйНомер(РегистрационныйНомер)
	ПустойРегистрационныйНомер = "00000000-0000-0000-0000-000000000000"; 
	Если Строка(РегистрационныйНомер) <> ПустойРегистрационныйНомер Тогда
		РегистрационныйНомер = Новый УникальныйИдентификатор(ПустойРегистрационныйНомер);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция НайтиРегистрационныеНомера(Сектор, Код, СписокИспользуемыхРегистрационныхНомеров)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДвижениеЭкземпляровКниг.РегистрационныйНомер,
	|   ДвижениеЭкземпляровКниг.Статус
	|ИЗ
	|	РегистрСведений.ДвижениеЭкземпляровКниг КАК ДвижениеЭкземпляровКниг
	|ГДЕ
	|	ДвижениеЭкземпляровКниг.Сектор = &Сектор
	|	И ДвижениеЭкземпляровКниг.Код = &Код
	|УПОРЯДОЧИТЬ ПО
	|   ДвижениеЭкземпляровКниг.РегистрационныйНомер ВОЗР,
	|   ДвижениеЭкземпляровКниг.Период УБЫВ"
	);
	Запрос.УстановитьПараметр("Сектор", Сектор);
	Запрос.УстановитьПараметр("Код", Код);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокВыбора = Новый СписокЗначений;
	ЭтоПервыйЭлемент = Истина;
	Пока Выборка.Следующий() Цикл
		Если (ЭтоПервыйЭлемент = Истина) Тогда
			ТекущийРегистрационныйНомер = Выборка.РегистрационныйНомер;
			ТекущийСтатус = Выборка.Статус;
			Если ТекущийСтатус = Перечисления.СтатусКниги.ВНаличии Тогда;
				Если (СписокИспользуемыхРегистрационныхНомеров.Найти(ТекущийРегистрационныйНомер) = Неопределено) Тогда
					СписокВыбора.Добавить(Выборка.РегистрационныйНомер);
				КонецЕсли;
			КонецЕсли;
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			Если (Выборка.РегистрационныйНомер <> ТекущийРегистрационныйНомер) Тогда
				ТекущийРегистрационныйНомер = Выборка.РегистрационныйНомер;
				ТекущийСтатус = Выборка.Статус;
				Если ТекущийСтатус = Перечисления.СтатусКниги.ВНаличии Тогда;
					Если (СписокИспользуемыхРегистрационныхНомеров.Найти(ТекущийРегистрационныйНомер) = Неопределено) Тогда
						СписокВыбора.Добавить(Выборка.РегистрационныйНомер);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат СписокВыбора;
КонецФункции

&НаКлиенте
Процедура ОчисткаПоляКод(Код)
	ПустойКод = ВернутьПустуюСсылкуТипаСправочникКниги();
	Если Код <> ПустойКод Тогда
		Код = ПустойКод; 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВернутьПустуюСсылкуТипаСправочникКниги()
	Возврат Справочники.Книги.ПустаяСсылка();
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если (Объект.Книги.Количество() = 0) Тогда
		Отказ = Истина;
		Сообщить("Количество строк должно быть ненулевым");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция МожетЛиЗабронироватьКнигуЧитатель(Читатель)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|   ДвижениеЭкземпляровКнигПоЧитателям.РегистрационныйНомер,
	|   ДвижениеЭкземпляровКнигПоЧитателям.Статус,
	|   ДвижениеЭкземпляровКнигПоЧитателям.Период КАК Период
    |ИЗ
	|   РегистрСведений.ДвижениеЭкземпляровКнигПоЧитателям КАК ДвижениеЭкземпляровКнигПоЧитателям
    |ГДЕ
	|   ДвижениеЭкземпляровКнигПоЧитателям.Читатель = &Читатель
    |УПОРЯДОЧИТЬ ПО
	|   ДвижениеЭкземпляровКнигПоЧитателям.ВидКниги,
	|   ДвижениеЭкземпляровКнигПоЧитателям.Сектор,
	|   ДвижениеЭкземпляровКнигПоЧитателям.Код,
	|   ДвижениеЭкземпляровКнигПоЧитателям.РегистрационныйНомер,
	|   Период УБЫВ"
	);
	Запрос.УстановитьПараметр("Читатель", Читатель);
	Выборка = Запрос.Выполнить().Выбрать();
	ЭтоПервыйЭлемент = Истина;
	Пока Выборка.Следующий() Цикл
		Если (ЭтоПервыйЭлемент = Истина) Тогда
			ТекущийРегистрационныйНомер = Выборка.РегистрационныйНомер;
			ТекущийСтатус = Выборка.Статус;
			Если ТекущийСтатус = Перечисления.СтатусКнигиПоЧитателю.Выдано Тогда;
				Если (ПросроченаЛиКнига(Выборка.Период) = Истина) Тогда
					Возврат Ложь;
				КонецЕсли;
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусКнигиПоЧитателю.Сдано Тогда
				ДатаСдачи = Выборка.Период;
				Выборка.Следующий();
				Если (ПросроченаЛиКнигаДляСтатусаСдано(Выборка.Период, ДатаСдачи) = Истина) Тогда
					Если (ОплаченЛиШтраф(ТекущийРегистрационныйНомер, Читатель) = Ложь) Тогда
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			Если (Выборка.РегистрационныйНомер <> ТекущийРегистрационныйНомер) Тогда
				ТекущийРегистрационныйНомер = Выборка.РегистрационныйНомер;
				ТекущийСтатус = Выборка.Статус;
				Если ТекущийСтатус = Перечисления.СтатусКнигиПоЧитателю.Выдано Тогда;
					Если (ПросроченаЛиКнига(Выборка.Период) = Истина) Тогда
						Возврат Ложь;
					КонецЕсли;
				ИначеЕсли ТекущийСтатус = Перечисления.СтатусКнигиПоЧитателю.Сдано Тогда
					ДатаСдачи = Выборка.Период;
					Выборка.Следующий();
					Если (ПросроченаЛиКнигаДляСтатусаСдано(Выборка.Период, ДатаСдачи) = Истина) Тогда
						Если (ОплаченЛиШтраф(ТекущийРегистрационныйНомер, Читатель) = Ложь) Тогда
							Возврат Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаСервере
Функция ОплаченЛиШтраф(РегистрационныйНомер, Читатель)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|   ДвижениеШтрафов.Статус
    |ИЗ
	|   РегистрСведений.ДвижениеШтрафов КАК ДвижениеШтрафов
    |ГДЕ
	|   ДвижениеШтрафов.РегистрационныйНомер = &РегистрационныйНомер
	|   И ДвижениеШтрафов.Читатель = &Читатель   
    |УПОРЯДОЧИТЬ ПО
	|   ДвижениеШтрафов.Период УБЫВ"
	);
	Запрос.УстановитьПараметр("РегистрационныйНомер", РегистрационныйНомер);
	Запрос.УстановитьПараметр("Читатель", Читатель);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если Выборка.Статус = Перечисления.СтатусОплатыШтрафа.Оплачен Тогда
		Ответ = Истина;
	Иначе
		Ответ = Ложь;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

&НаСервере
Функция ПросроченаЛиКнига(ДатаВыдачи)
	ДатаСдачи = ДатаВыдачи + 3600 * 24 * ПараметрыСеанса.СрокПользованияКнигой; 
	Если (ДатаСдачи < Объект.Дата) Тогда
		Если (Цел(((Объект.Дата - ДатаСдачи) / (3600 * 24))) > 0) Тогда
			Ответ = Истина;
		Иначе
			Ответ = Ложь;
		КонецЕсли;
	Иначе Ответ = Ложь;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

&НаСервере
Функция ПросроченаЛиКнигаДляСтатусаСдано(ДатаВыдачи, ДатаСдачи) 
	Если (Цел(((ДатаСдачи - ДатаВыдачи) / (3600 * 24))) > 15) Тогда
		Ответ = Истина;
	Иначе
		Ответ = Ложь;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

&НаКлиенте
Процедура ЧитательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если (МожетЛиЗабронироватьКнигуЧитатель(ВыбранноеЗначение) = Ложь) Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить("Читатель не может забронировать книгу так как у него имеются просроченные экземпляры или неоплаченный штраф");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если (Объект.Дата = '00010101') Тогда 
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТекущийЭлемент = Элементы.Читатель;
КонецПроцедуры
