
&НаКлиенте
Процедура КнигиКодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Читатель <> ВернутьПустуюСсылкуТипаСправочникЧитатели() Тогда
		Книга = НайтиКнигу(ВыбранноеЗначение);
		Элементы.Книги.ТекущиеДанные.Название = Книга[0];
		Элементы.Книги.ТекущиеДанные.Автор = Книга[1];
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиКнигу(Код)
	Книга = Справочники.Книги.НайтиПоКоду(Код);
	Массив = Новый Массив(2);
	Массив[0] = Книга.Наименование;
	Массив[1] = Книга.Автор;
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура КнигиКодПриИзменении(Элемент)
	Если Объект.Читатель <> ВернутьПустуюСсылкуТипаСправочникЧитатели() Тогда
		ОчисткаПоляРегистрационныйНомер(Элементы.Книги.ТекущиеДанные.РегистрационныйНомер);
		ОчисткаПоляОплатаШтрафа(Элементы.Книги.ТекущиеДанные.ОплатаШтрафа);
		ОчисткаПоляСуммаШтрафа(Элементы.Книги.ТекущиеДанные.СуммаШтрафа);
		Элементы.Книги.ТекущийЭлемент = Элементы.КнигиРегистрационныйНомер;
		СписокИспользуемыхРегистрационныхНомеров = ПроверкаСовпадающихПолейСекторИКод(Элементы.Книги.ТекущиеДанные.Сектор, Элементы.Книги.ТекущиеДанные.Код, Элементы.Книги.ТекущиеДанные.НомерСтроки); 
		СписокВыбора = НайтиРегистрационныеНомера(Объект.Читатель, Элементы.Книги.ТекущиеДанные.Сектор, Элементы.Книги.ТекущиеДанные.Код, СписокИспользуемыхРегистрационныхНомеров);
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора);
	    Если ВыбранноеЗначение <> Неопределено Тогда
			Элементы.Книги.ТекущиеДанные.РегистрационныйНомер = ВыбранноеЗначение.Значение;
			Элементы.Книги.ТекущийЭлемент = Элементы.КнигиОплатаШтрафа;
			Результат = НайтиВариантыОплатыШтрафа(Элементы.Книги.ТекущиеДанные.РегистрационныйНомер, Объект.Читатель); 
			СписокВариантов = Результат[0];
			Элементы.Книги.ТекущиеДанные.СуммаШтрафа = Результат[1];
			Если (СписокВариантов.Количество() <> 0) Тогда
				ВыбранныйВариант = ВыбратьИзСписка(СписокВариантов);
				Если (ВыбранныйВариант = Неопределено) Тогда
					Элементы.Книги.ТекущиеДанные.ОплатаШтрафа = ВернутьВариантОплатыШтрафаНеОплачивать();
				Иначе
					Элементы.Книги.ТекущиеДанные.ОплатаШтрафа = ВыбранныйВариант.Значение;
				КонецЕсли;
			Иначе 
				Элементы.Книги.ТекущиеДанные.ОплатаШтрафа = ВернутьВариантОплатыШтрафаНеОплачивать();
			КонецЕсли;
			Элементы.Книги.ТекущийЭлемент = Элементы.КнигиСуммаШтрафа;
		Иначе
			ОчисткаПоляКод(Элементы.Книги.ТекущиеДанные.Код);
			ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Название);
			ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Автор);
		КонецЕсли;
	Иначе 
		Сообщить("Поле " + Символ(34)+ "Читатель" + Символ(34)+ " не заполнено");
		Элементы.Книги.ТекущиеДанные.Код = ВернутьПустуюСсылкуТипаСправочникКниги();
		ТекущийЭлемент = Элементы.Читатель;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаПоляОплатаШтрафа(Поле)
	ПустойШтраф = ВернутьПустуюСсылкуТипаОплатаШтрафа();
	Если (Поле <> ПустойШтраф) Тогда
		Поле = ПустойШтраф;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВернутьПустуюСсылкуТипаОплатаШтрафа()
	Возврат Перечисления.ВариантОплатыШтрафа.ПустаяСсылка();
КонецФункции

&НаКлиенте
Процедура ОчисткаПоляСуммаШтрафа(Поле)
	Если (Поле <> 0) Тогда
		Поле = 0;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВернутьВариантОплатыШтрафаНеОплачивать()
	Возврат Перечисления.ВариантОплатыШтрафа.НеОплачивать;
КонецФункции

&НаСервере
Функция НайтиВариантыОплатыШтрафа(РегистрационныйНомер, Читатель)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДвижениеЭкземпляровКнигПоЧитателям.Период
	|ИЗ
	|	РегистрСведений.ДвижениеЭкземпляровКнигПоЧитателям КАК ДвижениеЭкземпляровКнигПоЧитателям
	|ГДЕ
	|	ДвижениеЭкземпляровКнигПоЧитателям.РегистрационныйНомер = &РегистрационныйНомер
	|	И ДвижениеЭкземпляровКнигПоЧитателям.Читатель = &Читатель
	|УПОРЯДОЧИТЬ ПО
	|   ДвижениеЭкземпляровКнигПоЧитателям.Период УБЫВ"
	);
	Запрос.УстановитьПараметр("РегистрационныйНомер", РегистрационныйНомер);
	Запрос.УстановитьПараметр("Читатель", Читатель);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	СписокВариантов = Новый СписокЗначений;
	ДатаВыдачи = Выборка.Период; 
	Если (ПросроченаЛиКнига(ДатаВыдачи) = Истина) Тогда
		СписокВариантов.Добавить(Перечисления.ВариантОплатыШтрафа.НеОплачивать);
		СписокВариантов.Добавить(Перечисления.ВариантОплатыШтрафа.Оплачивать);
	КонецЕсли;
	Результат = Новый Массив;
	Результат.Добавить(СписокВариантов);
	Если (СписокВариантов.Количество() > 1) Тогда
		Результат.Добавить(РассчитатьСуммуШтрафа(ДатаВыдачи));
	Иначе
		Результат.Добавить(0);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Функция РассчитатьСуммуШтрафа(ДатаВыдачи)
	Возврат Цел(((Объект.Дата - (ДатаВыдачи + 3600 * 24 * ПараметрыСеанса.СрокПользованияКнигой)) / (3600 * 24))) * ПараметрыСеанса.ЕдиницаОплатыШтрафа;
КонецФункции

&НаСервере
Функция ПросроченаЛиКнига(ДатаВыдачи)
	ДатаСдачи = ДатаВыдачи + 3600 * 24 * ПараметрыСеанса.СрокПользованияКнигой; 
	Если (ДатаСдачи < Объект.Дата) Тогда
		Если (Цел(((Объект.Дата - ДатаСдачи) / (3600 * 24))) > 0) Тогда
			Ответ = Истина;
		Иначе
			Ответ = Ложь;
		КонецЕсли;
	Иначе Ответ = Ложь;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

&НаСервере
Функция ВернутьСрокПользованияКнигой()
	Возврат ПараметрыСеанса.СрокПользованияКнигой;
КонецФункции

&НаСервере
Функция ВернутьПустуюСсылкуТипаСправочникЧитатели()
	Возврат Справочники.Читатели.ПустаяСсылка();
КонецФункции

&НаКлиенте
Функция ПроверкаСовпадающихПолейСекторИКод(Сектор, Код, НомерТекущейСтроки)
	СписокИспользуемыхРегистрационныхНомеров = Новый Массив;
	Для Каждого ТекущаяСтрока Из Объект.Книги Цикл
		Если (ТекущаяСтрока.НомерСтроки <> НомерТекущейСтроки) Тогда
			Если ((ТекущаяСтрока.Сектор = Сектор) И (ТекущаяСтрока.Код = Код)) Тогда
				СписокИспользуемыхРегистрационныхНомеров.Добавить(ТекущаяСтрока.РегистрационныйНомер);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  
	Возврат СписокИспользуемыхРегистрационныхНомеров;
КонецФункции

&НаКлиенте
Процедура КнигиВидПриИзменении(Элемент)
	ОчисткаПоляРегистрационныйНомер(Элементы.Книги.ТекущиеДанные.РегистрационныйНомер);
	ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Название);
	ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Автор);
	ОчисткаПоляОплатаШтрафа(Элементы.Книги.ТекущиеДанные.ОплатаШтрафа);
	ОчисткаПоляСуммаШтрафа(Элементы.Книги.ТекущиеДанные.СуммаШтрафа);
КонецПроцедуры

&НаКлиенте
Процедура КнигиСекторПриИзменении(Элемент)
	ОчисткаПоляРегистрационныйНомер(Элементы.Книги.ТекущиеДанные.РегистрационныйНомер);
	ОчисткаПоляКод(Элементы.Книги.ТекущиеДанные.Код);
	ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Название);
	ОчисткаПоля(Элементы.Книги.ТекущиеДанные.Автор);
	ОчисткаПоляОплатаШтрафа(Элементы.Книги.ТекущиеДанные.ОплатаШтрафа);
	ОчисткаПоляСуммаШтрафа(Элементы.Книги.ТекущиеДанные.СуммаШтрафа);
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаПоля(Поле)
	Если Поле <> "" Тогда
		Поле = "";
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаПоляРегистрационныйНомер(РегистрационныйНомер)
	ПустойРегистрационныйНомер = "00000000-0000-0000-0000-000000000000"; 
	Если Строка(РегистрационныйНомер) <> ПустойРегистрационныйНомер Тогда
		РегистрационныйНомер = Новый УникальныйИдентификатор(ПустойРегистрационныйНомер);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция НайтиРегистрационныеНомера(Читатель, Сектор, Код, СписокИспользуемыхРегистрационныхНомеров)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДвижениеЭкземпляровКнигПоЧитателям.РегистрационныйНомер,
	|   ДвижениеЭкземпляровКнигПоЧитателям.Статус
	|ИЗ
	|	РегистрСведений.ДвижениеЭкземпляровКнигПоЧитателям КАК ДвижениеЭкземпляровКнигПоЧитателям
	|ГДЕ
	|	ДвижениеЭкземпляровКнигПоЧитателям.Сектор = &Сектор
	|	И ДвижениеЭкземпляровКнигПоЧитателям.Код = &Код
	|   И ДвижениеЭкземпляровКнигПоЧитателям.Читатель = &Читатель
	|УПОРЯДОЧИТЬ ПО
	|   ДвижениеЭкземпляровКнигПоЧитателям.РегистрационныйНомер ВОЗР,
	|   ДвижениеЭкземпляровКнигПоЧитателям.Период УБЫВ"
	);
	Запрос.УстановитьПараметр("Сектор", Сектор);
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("Читатель", Читатель);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокВыбора = Новый СписокЗначений;
	ЭтоПервыйЭлемент = Истина;
	Пока Выборка.Следующий() Цикл
		Если (ЭтоПервыйЭлемент = Истина) Тогда
			ТекущийРегистрационныйНомер = Выборка.РегистрационныйНомер;
			ТекущийСтатус = Выборка.Статус;
			Если ТекущийСтатус = Перечисления.СтатусКнигиПоЧитателю.Выдано Тогда;
				Если (СписокИспользуемыхРегистрационныхНомеров.Найти(ТекущийРегистрационныйНомер) = Неопределено) Тогда
					СписокВыбора.Добавить(Выборка.РегистрационныйНомер);
				КонецЕсли;
			КонецЕсли;
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			Если (Выборка.РегистрационныйНомер <> ТекущийРегистрационныйНомер) Тогда
				ТекущийРегистрационныйНомер = Выборка.РегистрационныйНомер;
				ТекущийСтатус = Выборка.Статус;
				Если ТекущийСтатус = Перечисления.СтатусКнигиПоЧитателю.Выдано Тогда;
					Если (СписокИспользуемыхРегистрационныхНомеров.Найти(ТекущийРегистрационныйНомер) = Неопределено) Тогда
						СписокВыбора.Добавить(Выборка.РегистрационныйНомер);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат СписокВыбора;
КонецФункции

&НаКлиенте
Процедура ОчисткаПоляКод(Код)
	ПустойКод = ВернутьПустуюСсылкуТипаСправочникКниги();
	Если Код <> ПустойКод Тогда
		Код = ПустойКод; 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВернутьПустуюСсылкуТипаСправочникКниги()
	Возврат Справочники.Книги.ПустаяСсылка();
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если (Объект.Книги.Количество() = 0) Тогда
		Отказ = Истина;
		Сообщить("Количество строк должно быть ненулевым");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЧитательПриИзменении(Элемент)
	Если ((Объект.Читатель <> ВернутьПустуюСсылкуТипаСправочникЧитатели()) И (Объект.Книги.Количество() <> 0)) Тогда
		Для Каждого ТекущаяСтрока из Объект.Книги Цикл
			ОчисткаПоляКод(ТекущаяСтрока.Код);
			ОчисткаПоля(ТекущаяСтрока.Название);
			ОчисткаПоля(ТекущаяСтрока.Автор);
			ОчисткаПоля(ТекущаяСтрока.РегистрационныйНомер);
			ОчисткаПоляОплатаШтрафа(ТекущаяСтрока.ОплатаШтрафа);
			ОчисткаПоляСуммаШтрафа(ТекущаяСтрока.СуммаШтрафа);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если (Объект.Дата = '00010101') Тогда 
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТекущийЭлемент = Элементы.Читатель;
КонецПроцедуры
